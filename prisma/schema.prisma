generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid())
  email        String    @unique
  name         String
  consent      Boolean   @default(false)
  orders       Order[]
  predictions  Prediction[]
  feedbacks    Feedback[]
  features     Feature[]  @relation("UserFeature")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Product {
  id          String     @id @default(uuid())
  name        String
  sku         String     @unique
  price       Float
  inventory   Int        @default(0)
  predictions Prediction[]
  orders      Order[]
  features    Feature[]  @relation("ProductFeature")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Van {
  id          String     @id @default(uuid())
  zone        String
  locationLat Float
  locationLng Float
  inventory   Json
  assignedOrders Order[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Prediction {
  id          String     @id @default(uuid())
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  product     Product    @relation(fields: [productId], references: [id])
  productId   String
  confidence  Float
  status      String     // e.g. 'queued', 'ordered', 'expired'
  createdAt   DateTime   @default(now())
}

model Order {
  id          String     @id @default(uuid())
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  product     Product    @relation(fields: [productId], references: [id])
  productId   String
  van         Van?       @relation(fields: [vanId], references: [id])
  vanId       String?
  status      String     // e.g. 'pending', 'picked', 'delivered'
  feedbacks   Feedback[] @relation("OrderFeedback")
  createdAt   DateTime   @default(now())
}

model Feedback {
  id          String     @id @default(uuid())
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  order       Order      @relation("OrderFeedback", fields: [orderId], references: [id])
  orderId     String
  rating      Int
  comment     String?
  createdAt   DateTime   @default(now())
}

model IngestedEvent {
  id        String   @id @default(uuid())
  type      String   // 'POS', 'App', 'Loyalty', 'External'
  payload   Json
  createdAt DateTime @default(now())
}

model Feature {
  id        String   @id @default(uuid())
  user      User?    @relation("UserFeature", fields: [userId], references: [id])
  userId    String?  @unique
  product   Product? @relation("ProductFeature", fields: [productId], references: [id])
  productId String?  @unique
  rfm       Int?
  cluster   String?
  seasonality String?
  updatedAt DateTime @updatedAt
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    String?
  event     String
  details   String?
  createdAt DateTime @default(now())
}

model DataVault {
  id        String   @id @default(uuid())
  userId    String
  encryptedField String
  createdAt DateTime @default(now())
} 